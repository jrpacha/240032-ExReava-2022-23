clearvars;
close all
filename='MN-P2-ExReava-22-23.tex'; % nom LaTeX file to generate
fout=fopen(filename,'w','n','UTF-8');  % open output file: 'UTF-8' flag for non-ascii characters

fprintf(fout,'\\documentclass[12pt,a4paper]{article}\n'); % Begins LaTeX file
fprintf(fout,'\\usepackage{graphicx}\n');
fprintf(fout,'\\usepackage{amsmath}\n');
fprintf(fout,'\\usepackage{moodle}\n'); % You have to compile using LuaLaTex
fprintf(fout,'\\moodleset{ppi=200}\n'); 
fprintf(fout,'\\usepackage{babel}\n');  % to allow non-ascii characters
fprintf(fout,'\\usepackage{enumerate}\n');
fprintf(fout,'\\begin{document}\n');

category='MN-P2-ExReava-22-23'; %nom de les preguntes com a categoria de Moodle  

fprintf(fout, '\\begin{figure}[!h] \n');
fprintf(fout, '\\centering \n');
fprintf(fout, '\\includegraphics[scale = 0.6]{thermalSquareFigure-cropped.png} \n');
fprintf(fout, '\\end{figure} \n\n');

fprintf(fout,'\\begin{quiz}{%s}\n',category); %(es podria no posar nom)

%The exercise has only one parameter, the value of ff in the region A (the
%elements strictly below the diagonal)

% Fixed data
% 
meshFile = 'mesh8x8Quad';    % (.m) file with the mesh's nodes and elements 
kc = 2.0;                    % Thermal conductivity
tempTop = 15.0;              % Temperature at the top boundary
tempBot = -10.0;             % Temperature at the bottom boundary
TinfLeft = 100.0;            % Bulk temperature at left edge
betaLeft = 30.0;             % Convection coefficient at left edge 
TinfRight = 55.0;            % Bulk temperature at right edge
betaRight = 45.0;            % Convection coefficient at right edge

indNodHint = 81;             % Num nod. where we give the temperature as a Hint

% Point for interpolated temperature 
xP = (0.25 + 0.375)/2; yP = xP; interpPointP = [xP, yP]; 

% point for interpolated temperature (1D interpolation & nodes on diagonal)
xQ = (0.75 + 0.875)/2; yQ = xQ; interpPointQ = [xQ, yQ]; 

% Variable data
ff = [150, 200, 250, 300, 350, 400, 450, 500]; % (in W/m^3)

nPregTotal = length(ff);     % Number of different questions to generate
numFakeSols = 4;             % Nomber of 'fake' solutions

for npreg=1:nPregTotal
    % Compute the answers
    [u, Q, nodes, elem, ...
        maxTempB, nodMaxTempB, ...
        interpTempPointP, numElemPointP, indNodElemPointP, ...
        interpTempPointQ, averagedTempDiag] = thermalSquare ...
        ( ...
            meshFile, ...
            ff(npreg), ...
            kc, ...
            tempTop, ...
            tempBot, ... 
            TinfLeft, ... 
            betaLeft, ...
            TinfRight, ...
            betaRight, ...
            interpPointP, ...
            interpPointQ, ...
            'N' ...          % Do not show plots
         );

    tempNodHint = u(indNodHint);

    % Compute the fake (randomized) answers
    fakeMaxTempB = randomizedAnswers(maxTempB, numFakeSols);
    fakeInterpTempPointP = randomizedAnswers(interpTempPointP, numFakeSols);
    fakeinterpTempPointQ = randomizedAnswers(interpTempPointQ, numFakeSols);

    %% Comencem a escriure la pregunta
    fprintf(fout,'\\begin{cloze}{Question %d} \n ', npreg);

    perm = ['Consider the stationary 2D heat equation $-k_{c}\\Delta T = f$ \n',...
        'on the square $\\Omega = [0,1]\\times [0,1]$. The thermal condictivity is \n', ...
        '$k_{c} = %.1f$ (W/(m$^{\\circ}$C). The temperature \n',...
        'is fixed at $T = %.1f^{\\circ}$C at the top edge and $T = %.1f^{\\circ}$C \n',...
        'at the bottom edge. On the side edges there is convection: \n',...
        'the media in contact with the left edge is at $T_{\\infty} = %.1f^{\\circ}$C \n',...
        'and the convection coefficient is $\\beta = %.1f$ whereas\n', ...
        'the media in contact with the right edge is at $T_{\\infty} = %.1f^{\\circ}$C \n', ...
        'and convection coefficient is $\\beta = %.1f$. \n\n\n', ...
        'Using the mesh defined in the file \\texttt{mesh8x8Quad.m}, and assuming that \n', ...
        'there is a constant heat generation $f = %.1f$ W/m$^{3}$ at the region $A$ made \n', ...
        'up by the union of the elements that have all their nodes at, or below \n', ...
        'the diagonal $y=x$ (region dashed in Yellow at the Figure), carry out the \n', ...
        'corresponding FEM analysis and answer the following questions.\n\n\n'
        ];
  
    fprintf(fout, ...
        perm, ...
        kc, ...
        tempTop, ...
        tempBot, ...
        TinfLeft, ...
        betaLeft, ...
        TinfRight, ...
        betaRight, ...
        ff(npreg) ...
        );

        primerApartat = [
            '\\begin{multi}[points=3,vertical]\n',...
            '(a) (3 points) The maximum nodal temperature on the region \n',...
            '$B :=\\Omega \\setminus A$ (in $^{\\circ}$C) is \n\n\n',...
            '\\textbf{Remark}. Note that nodes in region $B$ are those that do \\textbf{not} \n' , ...
             'belong to any of the elements tiling the region $A$. \n\n', ...
            '\\item[fraction=100] %.4e\n'
             ];

        for e = 1:numFakeSols
            primerApartat = [
                primerApartat,...
                '\\item[fraction=-25] %.4e\n'
            ];
        end

       primerApartat = [
             primerApartat,...
             '\\item Leave it empty (no penalty) \n',...
             '\\end{multi} \n'
            ];

       primerApartat = [
           primerApartat,...
            '\nHint. The temperature at node %d is %.4e $^{\\circ}$C. \n\n\n'
            ];
 
        fprintf(fout, ...
            primerApartat, ...
            maxTempB, ...
            fakeMaxTempB, ...
            indNodHint, ...
            tempNodHint);

        segonApartat = [
            '\\begin{multi}[points=3,vertical]\n',...
             '(b) (3 points) The interpolated temperature at point \n', ...
             '$P =(%.5f, %.5f)$ is (in $^{\\circ}$C) \n\n\n', ...
             '\\item[fraction=100] %.4e\n'
            ];

        for e = 1:numFakeSols
            segonApartat = [
                segonApartat,...
                '\\item[fraction=-25] %.4e\n'
                ];
        end

        segonApartat = [
             segonApartat,...
             '\\item Leave it empty (no penalty)\n',...
             '\\end{multi}\n'
             ];

%         segonApartat = [
%            segonApartat,...
%             'Hint. The node''s $1$ reaction force''s component in the \n',...
%             '$x$-direction is, $X_{1} = $ %.4e kN. \n\n' 
%             ];
         
        fprintf(fout, ...
            segonApartat, ...
            interpPointP, ...
            interpTempPointP, ...
            fakeInterpTempPointP);

        tercerApartat = [
            '\\begin{multi}[points=4,vertical]\n',...
            '(c) (4 points) Now, consider just the nodes at the diagonal $y = x$. \n', ...
            'Using the temperatures $T_{i}$, $i = 1,\\dots,n_{d}$, at \\textbf{all} \n', ...
            'these nodes, and their corresponding abscissas $x_{i}$, $i = 1,\\dots,n_{d}$, \n', ...
            'the temperature''s approximation (in C$^{\\circ}$) at the point $Q = (%.5f, %.5f)$ given by \n', ...
            '1D-interpolaton polyonomial (computed, recall, taking \\textbf{all} the \n', ...
            'nodes at the diagonal) is found to be \n\n\n', ...
            '\\item[fraction=100] %.4e\n'
            ];

        for e = 1:numFakeSols
            tercerApartat = [
                tercerApartat,...
                '\\item[fraction=-25] %.4e\n'          
                ];
        end

        tercerApartat = [
             tercerApartat,...
             '\\item Leave it empty (no penalty)\n',...
             '\\end{multi}\n'
             ];

        tercerApartat = [
           tercerApartat, ...
            '\nHint. The averged temperature of the nodes at the \n',...
            'diagonal is $\\langle T\\rangle_{d} = $ %.4e$^{\\circ}$C \n\n\n'
            ];

        fprintf(fout, ...
            tercerApartat, ...
            interpPointQ, ...
            interpTempPointQ, ...
            fakeinterpTempPointQ, ...
            averagedTempDiag);

%         adviceMsg=[
%             'You can use Matlab as desk calculator and to \n',...
%             'solve the linear systems as well. \n\n'
%             ];
%         
%         fprintf(fout,adviceMsg);
  
fprintf(fout,'\\end{cloze}');
fprintf(fout,'\n\n'); 

end

fprintf(fout,'\\end{quiz}\n');
fprintf(fout,'\\end{document}  \n');

fclose(fout);

%% (c) Numerical Factory 2020 (by T. Susin, M. Calle, P. Gutierrez, J Puig)
